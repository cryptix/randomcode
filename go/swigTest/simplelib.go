/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.3
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

// source: simplelib.swig

package simplelib

import "unsafe"
import _ "runtime/cgo"

var _cgo_runtime_cgocall func(unsafe.Pointer, uintptr)



type _ unsafe.Pointer



var Swig_escape_always_false bool
var Swig_escape_val interface{}


type _swig_fnptr *byte
type _swig_memberptr *byte

type SwigcptrStringVector uintptr

func (p SwigcptrStringVector) Swigcptr() uintptr {
	return (uintptr)(p)
}

func (p SwigcptrStringVector) SwigIsStringVector() {
}

var _wrap_new_StringVector__SWIG_0 unsafe.Pointer

func _swig_wrap_new_StringVector__SWIG_0() (base SwigcptrStringVector) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_new_StringVector__SWIG_0, _swig_p)
	return
}

func NewStringVector__SWIG_0() (_swig_ret StringVector) {
	return _swig_wrap_new_StringVector__SWIG_0()
}

var _wrap_new_StringVector__SWIG_1 unsafe.Pointer

func _swig_wrap_new_StringVector__SWIG_1(base int64) (_ SwigcptrStringVector) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_new_StringVector__SWIG_1, _swig_p)
	return
}

func NewStringVector__SWIG_1(arg1 int64) (_swig_ret StringVector) {
	return _swig_wrap_new_StringVector__SWIG_1(arg1)
}

func NewStringVector(a ...interface{}) StringVector {
	argc := len(a)
	if argc == 0 {
		return NewStringVector__SWIG_0()
	}
	if argc == 1 {
		return NewStringVector__SWIG_1(a[0].(int64))
	}
	panic("No match for overloaded function call")
}

var _wrap_StringVector_size unsafe.Pointer

func _swig_wrap_StringVector_size(base SwigcptrStringVector) (_ int64) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_StringVector_size, _swig_p)
	return
}

func (arg1 SwigcptrStringVector) Size() (_swig_ret int64) {
	return _swig_wrap_StringVector_size(arg1)
}

var _wrap_StringVector_capacity unsafe.Pointer

func _swig_wrap_StringVector_capacity(base SwigcptrStringVector) (_ int64) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_StringVector_capacity, _swig_p)
	return
}

func (arg1 SwigcptrStringVector) Capacity() (_swig_ret int64) {
	return _swig_wrap_StringVector_capacity(arg1)
}

var _wrap_StringVector_reserve unsafe.Pointer

func _swig_wrap_StringVector_reserve(base SwigcptrStringVector, _ int64) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_StringVector_reserve, _swig_p)
	return
}

func (arg1 SwigcptrStringVector) Reserve(arg2 int64) {
	_swig_wrap_StringVector_reserve(arg1, arg2)
}

var _wrap_StringVector_isEmpty unsafe.Pointer

func _swig_wrap_StringVector_isEmpty(base SwigcptrStringVector) (_ bool) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_StringVector_isEmpty, _swig_p)
	return
}

func (arg1 SwigcptrStringVector) IsEmpty() (_swig_ret bool) {
	return _swig_wrap_StringVector_isEmpty(arg1)
}

var _wrap_StringVector_clear unsafe.Pointer

func _swig_wrap_StringVector_clear(base SwigcptrStringVector) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_StringVector_clear, _swig_p)
	return
}

func (arg1 SwigcptrStringVector) Clear() {
	_swig_wrap_StringVector_clear(arg1)
}

var _wrap_StringVector_add unsafe.Pointer

func _swig_wrap_StringVector_add(base SwigcptrStringVector, _ string) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_StringVector_add, _swig_p)
	return
}

func (arg1 SwigcptrStringVector) Add(arg2 string) {
	_swig_wrap_StringVector_add(arg1, arg2)
}

var _wrap_StringVector_get unsafe.Pointer

func _swig_wrap_StringVector_get(base SwigcptrStringVector, _ int) (_ string) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_StringVector_get, _swig_p)
	return
}

func (arg1 SwigcptrStringVector) Get(arg2 int) (_swig_ret string) {
	return _swig_wrap_StringVector_get(arg1, arg2)
}

var _wrap_StringVector_set unsafe.Pointer

func _swig_wrap_StringVector_set(base SwigcptrStringVector, _ int, _ string) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_StringVector_set, _swig_p)
	return
}

func (arg1 SwigcptrStringVector) Set(arg2 int, arg3 string) {
	_swig_wrap_StringVector_set(arg1, arg2, arg3)
}

var _wrap_delete_StringVector unsafe.Pointer

func _swig_wrap_delete_StringVector(base uintptr) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_delete_StringVector, _swig_p)
	return
}

func DeleteStringVector(arg1 StringVector) {
	_swig_wrap_delete_StringVector(arg1.Swigcptr())
}

type StringVector interface {
	Swigcptr() uintptr
	SwigIsStringVector()
	Size() (_swig_ret int64)
	Capacity() (_swig_ret int64)
	Reserve(arg2 int64)
	IsEmpty() (_swig_ret bool)
	Clear()
	Add(arg2 string)
	Get(arg2 int) (_swig_ret string)
	Set(arg2 int, arg3 string)
}

type SwigcptrByteVector uintptr

func (p SwigcptrByteVector) Swigcptr() uintptr {
	return (uintptr)(p)
}

func (p SwigcptrByteVector) SwigIsByteVector() {
}

var _wrap_new_ByteVector__SWIG_0 unsafe.Pointer

func _swig_wrap_new_ByteVector__SWIG_0() (base SwigcptrByteVector) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_new_ByteVector__SWIG_0, _swig_p)
	return
}

func NewByteVector__SWIG_0() (_swig_ret ByteVector) {
	return _swig_wrap_new_ByteVector__SWIG_0()
}

var _wrap_new_ByteVector__SWIG_1 unsafe.Pointer

func _swig_wrap_new_ByteVector__SWIG_1(base int64) (_ SwigcptrByteVector) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_new_ByteVector__SWIG_1, _swig_p)
	return
}

func NewByteVector__SWIG_1(arg1 int64) (_swig_ret ByteVector) {
	return _swig_wrap_new_ByteVector__SWIG_1(arg1)
}

func NewByteVector(a ...interface{}) ByteVector {
	argc := len(a)
	if argc == 0 {
		return NewByteVector__SWIG_0()
	}
	if argc == 1 {
		return NewByteVector__SWIG_1(a[0].(int64))
	}
	panic("No match for overloaded function call")
}

var _wrap_ByteVector_size unsafe.Pointer

func _swig_wrap_ByteVector_size(base SwigcptrByteVector) (_ int64) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_ByteVector_size, _swig_p)
	return
}

func (arg1 SwigcptrByteVector) Size() (_swig_ret int64) {
	return _swig_wrap_ByteVector_size(arg1)
}

var _wrap_ByteVector_capacity unsafe.Pointer

func _swig_wrap_ByteVector_capacity(base SwigcptrByteVector) (_ int64) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_ByteVector_capacity, _swig_p)
	return
}

func (arg1 SwigcptrByteVector) Capacity() (_swig_ret int64) {
	return _swig_wrap_ByteVector_capacity(arg1)
}

var _wrap_ByteVector_reserve unsafe.Pointer

func _swig_wrap_ByteVector_reserve(base SwigcptrByteVector, _ int64) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_ByteVector_reserve, _swig_p)
	return
}

func (arg1 SwigcptrByteVector) Reserve(arg2 int64) {
	_swig_wrap_ByteVector_reserve(arg1, arg2)
}

var _wrap_ByteVector_isEmpty unsafe.Pointer

func _swig_wrap_ByteVector_isEmpty(base SwigcptrByteVector) (_ bool) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_ByteVector_isEmpty, _swig_p)
	return
}

func (arg1 SwigcptrByteVector) IsEmpty() (_swig_ret bool) {
	return _swig_wrap_ByteVector_isEmpty(arg1)
}

var _wrap_ByteVector_clear unsafe.Pointer

func _swig_wrap_ByteVector_clear(base SwigcptrByteVector) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_ByteVector_clear, _swig_p)
	return
}

func (arg1 SwigcptrByteVector) Clear() {
	_swig_wrap_ByteVector_clear(arg1)
}

var _wrap_ByteVector_add unsafe.Pointer

func _swig_wrap_ByteVector_add(base SwigcptrByteVector, _ byte) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_ByteVector_add, _swig_p)
	return
}

func (arg1 SwigcptrByteVector) Add(arg2 byte) {
	_swig_wrap_ByteVector_add(arg1, arg2)
}

var _wrap_ByteVector_get unsafe.Pointer

func _swig_wrap_ByteVector_get(base SwigcptrByteVector, _ int) (_ byte) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_ByteVector_get, _swig_p)
	return
}

func (arg1 SwigcptrByteVector) Get(arg2 int) (_swig_ret byte) {
	return _swig_wrap_ByteVector_get(arg1, arg2)
}

var _wrap_ByteVector_set unsafe.Pointer

func _swig_wrap_ByteVector_set(base SwigcptrByteVector, _ int, _ byte) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_ByteVector_set, _swig_p)
	return
}

func (arg1 SwigcptrByteVector) Set(arg2 int, arg3 byte) {
	_swig_wrap_ByteVector_set(arg1, arg2, arg3)
}

var _wrap_delete_ByteVector unsafe.Pointer

func _swig_wrap_delete_ByteVector(base uintptr) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_delete_ByteVector, _swig_p)
	return
}

func DeleteByteVector(arg1 ByteVector) {
	_swig_wrap_delete_ByteVector(arg1.Swigcptr())
}

type ByteVector interface {
	Swigcptr() uintptr
	SwigIsByteVector()
	Size() (_swig_ret int64)
	Capacity() (_swig_ret int64)
	Reserve(arg2 int64)
	IsEmpty() (_swig_ret bool)
	Clear()
	Add(arg2 byte)
	Get(arg2 int) (_swig_ret byte)
	Set(arg2 int, arg3 byte)
}

type SwigcptrSimpleClass uintptr

func (p SwigcptrSimpleClass) Swigcptr() uintptr {
	return (uintptr)(p)
}

func (p SwigcptrSimpleClass) SwigIsSimpleClass() {
}

var _wrap_new_SimpleClass unsafe.Pointer

func _swig_wrap_new_SimpleClass() (base SwigcptrSimpleClass) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_new_SimpleClass, _swig_p)
	return
}

func NewSimpleClass() (_swig_ret SimpleClass) {
	return _swig_wrap_new_SimpleClass()
}

var _wrap_SimpleClass_hello unsafe.Pointer

func _swig_wrap_SimpleClass_hello(base SwigcptrSimpleClass) (_ string) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_SimpleClass_hello, _swig_p)
	return
}

func (arg1 SwigcptrSimpleClass) Hello() (_swig_ret string) {
	return _swig_wrap_SimpleClass_hello(arg1)
}

var _wrap_SimpleClass_helloString unsafe.Pointer

func _swig_wrap_SimpleClass_helloString(base SwigcptrSimpleClass, _ uintptr) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_SimpleClass_helloString, _swig_p)
	return
}

func (arg1 SwigcptrSimpleClass) HelloString(arg2 StringVector) {
	_swig_wrap_SimpleClass_helloString(arg1, arg2.Swigcptr())
}

var _wrap_SimpleClass_helloBytes unsafe.Pointer

func _swig_wrap_SimpleClass_helloBytes(base SwigcptrSimpleClass, _ uintptr) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_SimpleClass_helloBytes, _swig_p)
	return
}

func (arg1 SwigcptrSimpleClass) HelloBytes(arg2 ByteVector) {
	_swig_wrap_SimpleClass_helloBytes(arg1, arg2.Swigcptr())
}

var _wrap_delete_SimpleClass unsafe.Pointer

func _swig_wrap_delete_SimpleClass(base uintptr) {
	_swig_p := uintptr(unsafe.Pointer(&base))
	_cgo_runtime_cgocall(_wrap_delete_SimpleClass, _swig_p)
	return
}

func DeleteSimpleClass(arg1 SimpleClass) {
	_swig_wrap_delete_SimpleClass(arg1.Swigcptr())
}

type SimpleClass interface {
	Swigcptr() uintptr
	SwigIsSimpleClass()
	Hello() (_swig_ret string)
	HelloString(arg2 StringVector)
	HelloBytes(arg2 ByteVector)
}


type SwigcptrVoid uintptr
type Void interface {
	Swigcptr() uintptr;
}
func (p SwigcptrVoid) Swigcptr() uintptr {
	return uintptr(p)
}

